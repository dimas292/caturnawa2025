// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  admin
  judge
  participant
}

enum CompetitionType {
  KDBI
  EDC
  SPC
  DCC_INFOGRAFIS
  DCC_SHORT_VIDEO
}

enum RegistrationStatus {
  PENDING_PAYMENT
  PAYMENT_UPLOADED
  VERIFIED
  REJECTED
  COMPLETED
}

enum PaymentPhase {
  EARLY_BIRD
  PHASE_1
  PHASE_2
}

enum DebateStage {
  PRELIMINARY
  SEMIFINAL
  FINAL
}

enum TeamRole {
  LEADER
  MEMBER
}

enum Gender {
  MALE
  FEMALE
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          UserRole  @default(participant)
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Participant specific fields
  participant   Participant?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Competition Management
model Competition {
  id                String          @id @default(cuid())
  name              String
  shortName         String          // Added: short name for display
  type              CompetitionType @unique
  category          String          // Added: debate, academic, creative
  description       String?
  earlyBirdPrice    Int             // in cents/rupiah
  phase1Price       Int
  phase2Price       Int
  earlyBirdStart    DateTime
  earlyBirdEnd      DateTime
  phase1Start       DateTime
  phase1End         DateTime
  phase2Start       DateTime
  phase2End         DateTime
  workUploadDeadline DateTime?
  competitionDate   DateTime?
  maxTeamSize       Int             @default(1)
  minTeamSize       Int             @default(1)
  isActive          Boolean         @default(true)
  
  registrations     Registration[]
  rounds            DebateRound[]   // For debate competitions
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// Participant Profile
model Participant {
  id            String       @id @default(cuid())
  userId        String       @unique
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fullName      String
  email         String       // Added: email field for team members
  gender        Gender
  fullAddress   String?  // Made optional since we removed it from signup form
  whatsappNumber String
  institution   String
  faculty       String?
  studyProgram  String?
  studentId     String?
  
  registrations Registration[]
  teamMembers   TeamMember[]
  scores        DebateScore[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Registration System
model Registration {
  id                String             @id @default(cuid())
  participantId     String
  competitionId     String
  participant       Participant        @relation(fields: [participantId], references: [id], onDelete: Cascade)
  competition       Competition        @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  
  teamName          String?            // For team competitions
  status            RegistrationStatus @default(PENDING_PAYMENT)
  paymentPhase      PaymentPhase
  paymentAmount     Int
  paymentCode       String?            // Generated payment code
  paymentProofUrl   String?            // Uploaded payment proof
  adminNotes        String?            // Admin verification notes
  
  // Agreement
  agreementAccepted Boolean            @default(false)  // Added: agreement checkbox
  
  // Team members for team competitions
  teamMembers       TeamMember[]
  
  // File uploads
  files             RegistrationFile[]
  
  // Work submission (for non-debate competitions)
  // Note: SPC work submission is handled separately in semifinal round via dashboard
  workTitle         String?
  workDescription   String?
  workFileUrl       String?            // For Infografis, Short Video
  workLinkUrl       String?            // For Short Video
  
  // Debate match relations
  team1Matches      DebateMatch[]      @relation("Team1Matches")
  team2Matches      DebateMatch[]      @relation("Team2Matches")
  teamStanding      TeamStanding?
  
  verifiedAt        DateTime?
  rejectedAt        DateTime?
  verifiedBy        String?            // Admin user ID
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@unique([participantId, competitionId])
}

// Team Members (for team competitions)
model TeamMember {
  id              String       @id @default(cuid())
  registrationId  String
  participantId   String
  registration    Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  participant     Participant  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  
  role            TeamRole     @default(MEMBER)
  position        Int          // 1 = Leader, 2 = Member 1, 3 = Member 2, etc
  
  // Personal information
  fullName        String       // Added: full name
  email           String       // Added: email
  phone           String       // Added: phone number
  institution     String       // Added: institution
  faculty         String?      // Added: faculty
  studentId       String       // Added: student ID
  
  // File uploads for this member
  ktmFile         String?      // Added: KTM file URL (Student Card / Certificate of Active Student Status)
  photoFile       String?      // Added: Photo file URL (Passport-Style Photo with Red Background 4x6 cm)
  khsFile         String?      // Added: KHS file URL (Study Plan Card - KRS)
  socialMediaProof String?     // Added: Social media proof (UNAS FEST social media participation)
  twibbonProof    String?      // Added: Twibbon proof
  delegationLetter String?     // Added: Delegation letter (for debate)
  achievementsProof String?    // Added: Proof of achievements/outstanding accomplishments (max 10)
  
  // Additional KDBI/EDC specific fields
  pddiktiProof    String?      // Added: PDDikti profile screenshot
  instagramFollowProof String? // Added: Instagram follow proof
  youtubeFollowProof String?   // Added: YouTube follow proof
  tiktokFollowProof String?    // Added: TikTok follow proof
  attendanceCommitmentLetter String? // Added: Attendance commitment letter
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@unique([registrationId, position])
}

// File Management for Registration
model RegistrationFile {
  id              String       @id @default(cuid())
  registrationId  String
  registration    Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  
  fileName        String
  fileType        String       // KTM, PAS_FOTO, KHS, TWIBBON, SOCIAL_MEDIA, DELEGATION_LETTER, WORK_FILE, PAYMENT_PROOF, ACHIEVEMENTS_PROOF
  fileUrl         String
  fileSize        Int?         // in bytes
  mimeType        String?
  
  // Additional metadata
  originalName    String?      // Added: original file name
  memberId        String?      // Added: reference to TeamMember if applicable
  
  uploadedAt      DateTime     @default(now())
  
  @@index([registrationId, fileType])
  @@index([memberId])
}

// Debate Tournament System
model DebateRound {
  id              String          @id @default(cuid())
  competitionId   String
  competition     Competition     @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  
  stage           DebateStage
  roundNumber     Int             // 1, 2, 3, 4 for preliminary; 1, 2 for semifinal; 1, 2, 3 for final
  roundName       String          // "Preliminary Round 1", "Semifinal 1", etc
  
  matches         DebateMatch[]
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([competitionId, stage, roundNumber])
}

model DebateMatch {
  id              String          @id @default(cuid())
  roundId         String
  round           DebateRound     @relation(fields: [roundId], references: [id], onDelete: Cascade)
  
  matchNumber     Int
  team1Id         String?         // Registration ID
  team2Id         String?         // Registration ID
  team1           Registration?   @relation("Team1Matches", fields: [team1Id], references: [id])
  team2           Registration?   @relation("Team2Matches", fields: [team2Id], references: [id])
  
  winnerTeamId    String?         // Registration ID of winner
  
  scores          DebateScore[]
  
  scheduledAt     DateTime?
  completedAt     DateTime?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([roundId, matchNumber])
}

model DebateScore {
  id              String          @id @default(cuid())
  matchId         String
  participantId   String
  match           DebateMatch     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participant     Participant     @relation(fields: [participantId], references: [id], onDelete: Cascade)
  
  score           Float           // 1-100 with decimals for tie-breaking
  judgeId         String?         // User ID of judge who scored
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([matchId, participantId])
}

// Victory Points tracking
model TeamStanding {
  id              String       @id @default(cuid())
  registrationId  String       @unique
  registration    Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  
  victoryPoints   Int          @default(0)
  totalScore      Float        @default(0)
  averageScore    Float        @default(0)
  matchesPlayed   Int          @default(0)
  wins            Int          @default(0)
  losses          Int          @default(0)
  draws           Int          @default(0)
  
  // Stage-specific standings
  prelimVP        Int          @default(0)
  prelimAvgScore  Float        @default(0)
  semifinalVP     Int          @default(0)
  semifinalAvgScore Float      @default(0)
  finalVP         Int          @default(0)
  finalAvgScore   Float        @default(0)
  
  updatedAt       DateTime     @updatedAt
}