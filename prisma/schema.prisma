generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  role          UserRole      @default(participant)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  participant   Participant?
  sessions      Session[]
  judgeMatches  DebateMatch[] @relation("MatchJudge")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Competition {
  id                 String          @id @default(cuid())
  name               String
  shortName          String
  type               CompetitionType @unique
  category           String
  description        String?
  earlyBirdPrice     Int
  phase1Price        Int
  phase2Price        Int
  earlyBirdStart     DateTime
  earlyBirdEnd       DateTime
  phase1Start        DateTime
  phase1End          DateTime
  phase2Start        DateTime
  phase2End          DateTime
  workUploadDeadline DateTime?
  competitionDate    DateTime?
  maxTeamSize        Int             @default(1)
  minTeamSize        Int             @default(1)
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  rounds             DebateRound[]
  registrations      Registration[]
}

model Participant {
  id             String         @id @default(cuid())
  userId         String         @unique
  fullName       String
  email          String
  gender         Gender
  fullAddress    String?
  whatsappNumber String
  institution    String
  faculty        String?
  studyProgram   String?
  studentId      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  scores         DebateScore[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  registrations  Registration[]
  teamMembers    TeamMember[]
}

model Registration {
  id                String             @id @default(cuid())
  participantId     String
  competitionId     String
  teamName          String?
  status            RegistrationStatus @default(PENDING_PAYMENT)
  paymentPhase      PaymentPhase
  paymentAmount     Int
  paymentCode       String?
  paymentProofUrl   String?
  adminNotes        String?
  agreementAccepted Boolean            @default(false)
  workTitle         String?
  workDescription   String?
  workFileUrl       String?
  workLinkUrl       String?
  verifiedAt        DateTime?
  rejectedAt        DateTime?
  verifiedBy        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  dccSubmission     DCCSubmission?
  team1Matches      DebateMatch[]      @relation("Team1Matches")
  team2Matches      DebateMatch[]      @relation("Team2Matches")
  team3Matches      DebateMatch[]      @relation("Team3Matches")
  team4Matches      DebateMatch[]      @relation("Team4Matches")
  competition       Competition        @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  participant       Participant        @relation(fields: [participantId], references: [id], onDelete: Cascade)
  files             RegistrationFile[]
  spcSubmission     SPCSubmission?
  teamMembers       TeamMember[]
  teamStanding      TeamStanding?

  @@unique([participantId, competitionId])
}

model TeamMember {
  id                         String       @id @default(cuid())
  registrationId             String
  participantId              String
  role                       TeamRole     @default(MEMBER)
  position                   Int
  fullName                   String
  email                      String
  phone                      String
  institution                String
  faculty                    String?
  studentId                  String
  ktmFile                    String?
  photoFile                  String?
  khsFile                    String?
  twibbonProof               String?
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  instagramFollowProof       String?
  tiktokFollowProof          String?
  youtubeFollowProof         String?
  achievementsProof          String?
  pddiktiProof               String?
  attendanceCommitmentLetter String?
  delegationLetter           String?
  socialMediaProof           String?
  participant                Participant  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  registration               Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@unique([registrationId, position])
}

model RegistrationFile {
  id             String       @id @default(cuid())
  registrationId String
  fileName       String
  fileType       String
  fileUrl        String
  fileSize       Int?
  mimeType       String?
  originalName   String?
  memberId       String?
  uploadedAt     DateTime     @default(now())
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId, fileType])
  @@index([memberId])
}

model DebateRound {
  id            String        @id @default(cuid())
  competitionId String
  stage         DebateStage
  roundNumber   Int
  session       Int           @default(1)
  roundName     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  motion        String?
  isFrozen      Boolean       @default(false)
  frozenAt      DateTime?
  frozenBy      String?
  matches       DebateMatch[]
  competition   Competition   @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([competitionId, stage, roundNumber, session])
}

model DebateMatch {
  id                String        @id @default(cuid())
  roundId           String
  matchNumber       Int
  team1Id           String?
  team2Id           String?
  judgeId           String?
  scheduledAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  firstPlaceTeamId  String?
  fourthPlaceTeamId String?
  matchFormat       String        @default("BP")
  secondPlaceTeamId String?
  team3Id           String?
  team4Id           String?
  thirdPlaceTeamId  String?
  round             DebateRound   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  team1             Registration? @relation("Team1Matches", fields: [team1Id], references: [id])
  team2             Registration? @relation("Team2Matches", fields: [team2Id], references: [id])
  team3             Registration? @relation("Team3Matches", fields: [team3Id], references: [id])
  team4             Registration? @relation("Team4Matches", fields: [team4Id], references: [id])
  judge             User?         @relation("MatchJudge", fields: [judgeId], references: [id])
  scores            DebateScore[]

  @@unique([roundId, matchNumber])
}

model DebateScore {
  id            String      @id @default(cuid())
  matchId       String
  participantId String
  score         Float
  judgeId       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bpPosition    String?
  speakerRank   Int?
  teamPosition  String?
  match         DebateMatch @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([matchId, participantId, judgeId])
}

model TeamStanding {
  id                     String       @id @default(cuid())
  registrationId         String       @unique
  matchesPlayed          Int          @default(0)
  updatedAt              DateTime     @updatedAt
  averageSpeakerPoints   Float        @default(0)
  avgPosition            Float        @default(0)
  finalAvgPosition       Float        @default(0)
  finalSpeakerPoints     Float        @default(0)
  finalTeamPoints        Int          @default(0)
  firstPlaces            Int          @default(0)
  fourthPlaces           Int          @default(0)
  prelimAvgPosition      Float        @default(0)
  prelimSpeakerPoints    Float        @default(0)
  prelimTeamPoints       Int          @default(0)
  secondPlaces           Int          @default(0)
  semifinalAvgPosition   Float        @default(0)
  semifinalSpeakerPoints Float        @default(0)
  semifinalTeamPoints    Int          @default(0)
  speakerPoints          Float        @default(0)
  teamPoints             Int          @default(0)
  thirdPlaces            Int          @default(0)
  registration           Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
}

model SPCSubmission {
  id                         String                @id @default(cuid())
  registrationId             String                @unique
  judulKarya                 String
  catatan                    String?
  fileKarya                  String?
  suratOrisinalitas          String?
  suratPengalihanHakCipta    String?
  status                     SPCSubmissionStatus   @default(PENDING)
  evaluatedAt                DateTime?
  evaluatedBy                String?
  feedback                   String?
  strukturOrganisasi         Int?
  kualitasArgumen            Int?
  gayaBahasaTulis            Int?
  // DEPRECATED: Old semifinal scoring fields (kept for backward compatibility)
  // Will be removed after migration is complete and verified
  penilaianKaryaTulisIlmiah  Int?
  substansiKaryaTulisIlmiah  Int?
  kualitasKaryaTulisIlmiah   Int?
  catatanPenilaian           String?
  catatanSubstansi           String?
  catatanKualitas            String?
  totalSemifinalScore        Int?
  semifinalRank              Int?
  qualifiedToFinal           Boolean               @default(false)
  presentationOrder          Int?
  presentationTitle          String?
  scheduledTime              String?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  finalScores                SPCFinalScore[]
  semifinalScores            SPCSemifinalScore[]
  registration               Registration          @relation(fields: [registrationId], references: [id], onDelete: Cascade)
}

model SPCSemifinalScore {
  id                        String        @id @default(cuid())
  submissionId              String
  judgeId                   String
  judgeName                 String
  penilaianKaryaTulisIlmiah Int
  substansiKaryaTulisIlmiah Int
  kualitasKaryaTulisIlmiah  Int
  catatanPenilaian          String?
  catatanSubstansi          String?
  catatanKualitas           String?
  total                     Int
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  submission                SPCSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, judgeId])
  @@index([submissionId])
  @@index([judgeId])
}

model SPCFinalScore {
  id                 String        @id @default(cuid())
  submissionId       String
  judgeId            String
  judgeName          String
  pemaparanMateri    Int
  pertanyaanJawaban  Int
  kesesuaianTema     Int
  catatanPemaparan   String?
  catatanPertanyaan  String?
  catatanKesesuaian  String?
  total              Int
  feedback           String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  submission         SPCSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, judgeId])
}

model DCCSubmission {
  id                String               @id @default(cuid())
  registrationId    String               @unique
  judulKarya        String
  deskripsiKarya    String?
  catatan           String?
  fileKarya         String?
  status            DCCSubmissionStatus  @default(PENDING)
  evaluatedAt       DateTime?
  evaluatedBy       String?
  feedback          String?
  qualifiedToFinal  Boolean              @default(false)
  presentationOrder Int?
  scheduledTime     String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  finalScores       DCCFinalScore[]
  semifinalScores   DCCSemifinalScore[]
  shortVideoScores  DCCShortVideoScore[]
  registration      Registration         @relation(fields: [registrationId], references: [id], onDelete: Cascade)
}

model DCCSemifinalScore {
  id           String        @id @default(cuid())
  submissionId String
  judgeId      String
  judgeName    String
  desainVisual Int
  isiPesan     Int
  orisinalitas Int
  total        Int
  feedback     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  submission   DCCSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, judgeId])
}

model DCCShortVideoScore {
  id                String        @id @default(cuid())
  submissionId      String
  judgeId           String
  judgeName         String
  konsepKreatif     Int
  produksiVideo     Int
  penyampaianPesan  Int
  total             Int
  feedback          String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  submission        DCCSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, judgeId])
}

model DCCFinalScore {
  id                 String        @id @default(cuid())
  submissionId       String
  judgeId            String
  judgeName          String
  strukturPresentasi Int
  teknikPenyampaian  Int
  penguasaanMateri   Int
  kolaborasiTeam     Int
  total              Int
  feedback           String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  submission         DCCSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, judgeId])
}

enum UserRole {
  admin
  judge
  participant
}

enum CompetitionType {
  KDBI
  EDC
  SPC
  DCC_INFOGRAFIS
  DCC_SHORT_VIDEO
}

enum RegistrationStatus {
  PENDING_PAYMENT
  PAYMENT_UPLOADED
  VERIFIED
  REJECTED
  COMPLETED
}

enum PaymentPhase {
  EARLY_BIRD
  PHASE_1
  PHASE_2
}

enum DebateStage {
  PRELIMINARY
  SEMIFINAL
  FINAL
}

enum TeamRole {
  LEADER
  MEMBER
}

enum Gender {
  MALE
  FEMALE
}

enum SPCStage {
  SEMIFINAL
  FINAL
}

enum SPCSubmissionStatus {
  PENDING
  REVIEWED
  QUALIFIED
  NOT_QUALIFIED
}

enum DCCStage {
  SEMIFINAL
  FINAL
}

enum DCCSubmissionStatus {
  PENDING
  REVIEWED
  QUALIFIED
  NOT_QUALIFIED
}
